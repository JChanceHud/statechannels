version: 2.1

orbs:
  docker: circleci/docker@1.0.1
  slack: circleci/slack@3.4.1

defaults: &defaults
  working_directory: /home/circleci/project
  resource_class: medium
  docker:
    - image: cimg/node:12.18.0
  environment:
    NODE_ENV: test

postgres: &postgres
  <<: *defaults
  docker:
    - image: cimg/node:12.18.0
    - image: circleci/postgres:12-alpine-ram # server-wallet uses a postgresql DB. alpine-ram is a minimal installation that runs in memory (ie. faster tests!)
  environment:
    NODE_ENV: test
    PSQL_ARGS: -p 5432 -h localhost -U postgres
    POSTGRES_USER: postgres

# MACROS

save_dep: &save_dep
  save_cache:
    key: v14-dependency-cache-{{ checksum "yarn.lock" }}
    paths:
      - node_modules
      - packages/client-api-schema/node_modules
      - packages/devtools/node_modules
      - packages/docs-website/node_modules
      - packages/jest-gas-reporter/node_modules
      - packages/nitro-protocol/node_modules
      - packages/server-wallet/node_modules
      - packages/wallet-core/node_modules
      - packages/wire-format/node_modules
      - packages/browser-wallet/node_modules
      - packages/interop-tests/node_modules

restore_dep: &restore_dep
  restore_cache:
    key: v14-dependency-cache-{{ checksum "yarn.lock" }}

# END MACROS

commands:
  log_stats:
    description: 'Log stats '
    parameters:
      file:
        type: string
        default: stats
    steps:
      - run:
          command: bash bin/log_memory.sh <<parameters.file>>
          background: true

  upload_logs:
    description: 'Upload logs '
    parameters:
      file:
        type: string
        default: memory-usage.txt
    steps:
      - store_artifacts:
          path: /home/circleci/<< parameters.file >>.txt
          destination: << parameters.file >>

  upload_artifacts:
    description: 'Upload generic artifacts'
    steps:
      - store_artifacts:
          path: /home/circleci/project/artifacts

  notify_slack:
    description: 'Notify slack '
    steps:
      - slack/status:
          failure_message: 'A $CIRCLE_JOB job has failed on $CIRCLE_BRANCH!'
          fail_only: true
          mentions: 'SRHGGRGS0' # Group ID for ActiveDevs
          only_for_branches: 'master,deploy'

  install_postgresql_client:
    description: 'Install postgresql client'
    steps:
      - run:
          command: |
            sudo apt-get update
            sudo apt install -y postgresql-client || true

jobs:
  prepare:
    <<: *defaults
    resource_class: large
    steps:
      - checkout
      - log_stats:
          file: prepare-stats
      - <<: *restore_dep
      - run: yarn --cache-folder ~.cache/yarn
      - run: git diff --exit-code # Fails the job if you forgot to check in tracked installation and/or preparation artifacts (e.g. yarn.lock)
      - run: yarn lint:check
      - <<: *save_dep

      - persist_to_workspace:
          root: /home/circleci/project
          paths:
            - packages/*/dist
            - packages/*/build
            - packages/nitro-protocol/artifacts
            - packages/nitro-protocol/typechain
            - packages/*/lib
            - packages/*/node_modules
            - packages/client-api-schema/types
            - node_modules
      - upload_logs:
          file: prepare-stats
      - notify_slack

  test:
    <<: *postgres
    resource_class: large
    steps:
      - checkout
      - log_stats:
          file: test-stats
      - attach_workspace:
          at: /home/circleci/project
      - install_postgresql_client
      - run:
          name: wallet setup
          working_directory: packages/server-wallet
          # Create databases for the server-wallet and interop-tests package tests
          command: |
            SERVER_DB_NAME=server_wallet_test yarn db:create $PSQL_ARGS
            SERVER_DB_NAME=server_wallet_test yarn db:migrate

            SERVER_DB_NAME=interop_test yarn db:create $PSQL_ARGS
            SERVER_DB_NAME=interop_test yarn db:migrate

      - run:
          name: test
          command: |
            if [ "${CIRCLE_BRANCH}" = "master" ] || [ "${CIRCLE_BRANCH}" = "test-ci" ]
            then
              yarn test:ci
            else
              yarn test:ci:incremental
            fi
          no_output_timeout: 30m
      - upload_logs:
          file: test-stats
      - upload_artifacts 
      - notify_slack

  server-wallet-with-peers-test:
    <<: *postgres
    steps:
      - checkout
      - attach_workspace:
          at: /home/circleci/project
      - install_postgresql_client
      - run:
          name: server-wallet-with-peers-test
          working_directory: packages/server-wallet
          command: yarn test:with-peers
          no_output_timeout: 30m
      - upload_artifacts

  server-wallet-simple-stress-test:
    <<: *postgres
    steps:
      - checkout
      - attach_workspace:
          at: /home/circleci/project
      - install_postgresql_client
      - run:
          name: server-wallet-simple-stress-test
          working_directory: packages/server-wallet
          command: npx ts-node ./e2e-testing/scripts/start-all.ts -l ./e2e-testing/test-data/simple-ci-run.json
          no_output_timeout: 30m
      - upload_artifacts

  deploy-docs-website:
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: /home/circleci/project
      - when:
          condition:
            equal: [master, << pipeline.git.branch >>]
          steps:
            - run:
                name: build docs-website
                command: yarn lerna run build-docs-website --stream
            - run:
                name: ensure api-reports checked in (yarn lerna run generate-api)
                command: git diff --exit-code
            - run:
                name: deploy docs-website (production)
                command: >
                  npx -p netlify-cli
                  -c 'netlify deploy
                  --site $NITRO_PROTOCOL_NETLIFY_ID
                  --dir=/home/circleci/project/packages/docs-website/build
                  --auth $NETLIFY_ACCESS_TOKEN
                  --message $(git rev-parse --short HEAD)
                  --prod'
      - when:
          condition:
            not:
              equal: [master, << pipeline.git.branch >>]
          steps:
            - run:
                name: build docs-website
                command: yarn lerna run --since $(git merge-base $CIRCLE_BRANCH origin/master) build-docs-website --stream
            - run:
                name: ensure api-reports checked in (yarn lerna run generate-api)
                command: git diff --exit-code
            - run:
                name: deploy docs-website (preview)
                command: |
                  test ! -d "/home/circleci/project/packages/docs-website/build" && exit 0 

                  npx -p netlify-cli -c 'netlify deploy --site $NITRO_PROTOCOL_NETLIFY_ID --dir=/home/circleci/project/packages/docs-website/build --auth $NETLIFY_ACCESS_TOKEN --message $(git rev-parse --short HEAD) --json' | tee ./netlify_output.json
                  
                  pr_response=$(curl --location --request GET "https://api.github.com/repos/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/pulls?head=$CIRCLE_PROJECT_USERNAME:$CIRCLE_BRANCH&state=open" \
                  -u $GH_USER:$GH_API)

                  if [ $(echo $pr_response | jq length) -eq 0 ]; then
                    echo "No PR found to update" && exit 0
                  else
                    pr_comment_url=$(echo $pr_response | jq -r ".[]._links.comments.href")
                  fi

                  preview_url=$(grep -oE '(http).+(.netlify.app)' ./netlify_output.json)

                  curl --location --request POST "$pr_comment_url" \
                  -u $GH_USER:$GH_API \
                  --header 'Content-Type: application/json' \
                  --data-raw '{
                  "body": "**CircleCI Generated Comment:** A [new preview]('$preview_url') was generated for the docs-website."
                  }'
workflows:
  statechannels:
    jobs:
      - prepare

      - test:
          requires:
            - prepare
      - server-wallet-with-peers-test:
          requires:
            - prepare
      - server-wallet-simple-stress-test:
          requires:
            - prepare
      - deploy-docs-website:
          requires:
            - prepare
